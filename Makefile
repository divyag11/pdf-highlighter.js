# From http://oinksoft.com/static/closure-tools/Makefile.example
# This is an example Makefile for a project that uses all of the Closure
# Tools: Compiler, Library, Templates, Stylesheets, and Linter.
#
# `make deps`: Download and build all dependencies (compiler, etc.).
#
# `make`: Compile the project for development (does not use Closure
#     Stylesheet map $(CSS_MAP), uses compilation flags that should be
#     good for development).
#
# `make closure-final`: Compile the project for release.
#
# `make clean`: Remove compiled files.
#
# `make clean-deps`: Remove all files added by `make deps`.
#
# `make lint`: Run the Closure Linter over project source code.
#
#     NOTE: This task depends on a bash function `join-with` to exclude
#     JavaScript generated by Closure Templates. It is defined as
#     follows:
#
#         # usage: join-with SEPARATOR ITEM ITEM2 ITEM3 ...
#         join-with() {
#             local IFS="$1"
#             shift
#             echo "$*"
#         }
#
# `make js-size`: Recompiles and reports the file size of the generated
#     JavaScript.
#
# There are other sub-tasks below not documented here. 

.PHONY: all clean closure closure-final js js-final js-size lint gss \
	gss-final tpl deps download-deps venv-fetch build-deps venv-build \
	venv clean-deps

# Common
BUILD     = build
SRC       = src
NAMESPACE = pdf_highlighter

all: closure

clean:
	rm -f $(BUILD)/*.js $(BUILD)/*.css $(CSS_MAP)

# closure: gss tpl js
closure: js

# closure-final: gss-final tpl js-final
closure-final: js-final

# JavaScript
JS_SRC         = $(SRC)/closure
ROOT_NS        = $(NAMESPACE).main
MIN_SCRIPT     = $(BUILD)/$(NAMESPACE).min.js
TMP_MIN_SCRIPT = $(BUILD)/$(NAMESPACE).min.js.part
G_CC_FLAGS     = --js='$(G_CLIB_GOOG)/**.js' \
                 --js='!$(G_CLIB_GOOG)/**_test.js' \
			     --js='$(G_CLIB_3P)/**.js' \
			     --js='$(JS_SRC)/**.js' \
			     --entry_point=$(ROOT_NS) \
			     --dependency_mode=STRICT \
			     --generate_exports \
			     --output_wrapper "(function() {%output%}).call(window);" \
			     --compilation_level=ADVANCED_OPTIMIZATIONS
			
G_CC_DFLAGS    = $(G_CC_FLAGS) \
			     --formatting=PRETTY_PRINT \
			     --debug \
			     --jscomp_warning=lintChecks \
			     --jscomp_warning=accessControls \
			     --jscomp_warning=ambiguousFunctionDecl \
			     --jscomp_warning=checkRegExp \
			     --jscomp_warning=checkTypes \
			     --jscomp_warning=checkVars \
			     --jscomp_warning=const \
			     --jscomp_warning=constantProperty \
			     --jscomp_warning=deprecated \
			     --jscomp_warning=duplicateMessage \
			     --jscomp_warning=es5Strict \
			     --jscomp_warning=externsValidation \
			     --jscomp_warning=fileoverviewTags \
			     --jscomp_warning=globalThis \
			     --jscomp_warning=internetExplorerChecks \
			     --jscomp_warning=invalidCasts \
			     --jscomp_warning=missingProperties \
			     --jscomp_warning=nonStandardJsDocs \
			     --jscomp_warning=strictModuleDepCheck \
			     --jscomp_warning=typeInvalidation \
			     --jscomp_warning=undefinedNames \
			     --jscomp_warning=undefinedVars \
			     --jscomp_warning=unknownDefines \
			     --jscomp_warning=uselessCode \
			     --jscomp_warning=visibility

G_CC_PFLAGS    = $(G_CC_FLAGS) \
			     --js=$(CSS_MAP)

js:
	@$(G_CLIB_BUILD) $(G_CC_DFLAGS) --js_output_file=$(TMP_MIN_SCRIPT) \
		&& mv $(TMP_MIN_SCRIPT) $(MIN_SCRIPT)
#	@$(G_CLIB_BUILD) $(G_CC_DFLAGS) --output_file=$(TMP_MIN_SCRIPT) \
		&& mv $(TMP_MIN_SCRIPT) $(MIN_SCRIPT)

js-final:
	@$(G_CLIB_BUILD) $(G_CC_FLAGS) --js_output_file=$(TMP_MIN_SCRIPT) \
		&& mv $(TMP_MIN_SCRIPT) $(MIN_SCRIPT)
	# @$(G_CLIB_BUILD) $(G_CC_PFLAGS) --output_file=$(TMP_MIN_SCRIPT) \
	# 	&& mv $(TMP_MIN_SCRIPT) $(MIN_SCRIPT)

js-size: closure-final
	@du -h $(MIN_SCRIPT)
	@du -h $(MIN_SS)

# lint:
# 	@bash -c '$(ACTIVENV) && source src/bash/utils.bash && gjslint $(G_LINT_FLAGS)'

# Stylesheets
# MIN_SS      = $(BUILD)/$(NAMESPACE).min.css
# TMP_MIN_SS  = $(BUILD)/$(NAMESPACE).min.css.part
# CSS_MAP     = $(JS_SRC)/.css_map.js
# GSS_SRC     = $(SRC)/gss/*
# G_SS_FLAGS  =
# G_SS_PFLAGS = $(G_SS_FLAGS) \
# 			  --output-renaming-map-format CLOSURE_COMPILED \
# 			  --output-renaming-map $(CSS_MAP) \
# 			  --rename CLOSURE

# gss:
# 	@java -jar $(G_SS) $(G_SS_FLAGS) --output-file $(TMP_MIN_SS) $(GSS_SRC) \
# 		&& mv $(TMP_MIN_SS) $(MIN_SS)
# 	@echo $(MIN_SS)

# gss-final:
# 	@java -jar $(G_SS) $(G_SS_PFLAGS) --output-file $(TMP_MIN_SS) $(GSS_SRC) \
# 		&& mv $(TMP_MIN_SS) $(MIN_SS)
# 	@echo $(MIN_SS)
# 	@echo $(CSS_MAP)


# Templates
# TPL_SRC      = $(SRC)/soy
# SOY_JS       = $(G_TPL_ROOT)
# #SOY_JS       = $(G_TPL_ROOT)/javascript
# JS_TEMPLATES = $(JS_SRC)/highlighter/tpl
# G_TPL_FLAGS  = --codeStyle STRINGBUILDER \
# 			   --cssHandlingScheme goog \
# 			   --outputPathFormat $(JS_TEMPLATES)/{INPUT_FILE_NAME_NO_EXT}.js \
# 			   --shouldGenerateJsdoc \
# 			   --shouldProvideRequireSoyNamespaces

# tpl:
# 	@rm -rf $(JS_TEMPLATES)/*.js
# 	@java -jar $(G_TPL) $(G_TPL_FLAGS) $(TPL_SRC)/*.soy
# 	@ls -1 $(JS_TEMPLATES)/*.js

# Dependencies
DEPS_ROOT    = .contrib
G_ROOT       = $(DEPS_ROOT)/goog-closure
VENV         = $(DEPS_ROOT)/venv
ACTIVENV     = source $(VENV)/bin/activate

G_CC_URL     = http://dl.google.com/closure-compiler/compiler-latest.tar.gz
G_CLIB_URL   = https://github.com/google/closure-library/archive/v20170626.tar.gz
# G_TPL_URL    = https://dl.google.com/closure-templates/closure-templates-for-javascript-latest.zip
#G_LINT_URL   = http://closure-linter.googlecode.com/svn/trunk/
# G_SS_URL     = https://github.com/google/closure-stylesheets/releases/download/v1.4.0/closure-stylesheets.jar
G_CC_ROOT    = $(G_ROOT)/compiler
G_CLIB_ROOT  = $(G_ROOT)/library
# G_TPL_ROOT   = $(G_ROOT)/templates
#G_LINT_ROOT  = $(G_ROOT)/linter
# G_SS_ROOT    = $(G_ROOT)/stylesheets
G_CC         = $(G_CC_ROOT)/closure-compiler.jar
G_CLIB_BUILD = java -jar $(G_CC)
#G_CLIB_BUILD = $(G_CLIB_ROOT)/closure/bin/build/closurebuilder.py
G_CLIB_GOOG  = $(G_CLIB_ROOT)/closure/goog
G_CLIB_3P    = $(G_CLIB_ROOT)/third_party/closure/goog
# G_TPL        = $(G_TPL_ROOT)/SoyToJsSrcCompiler.jar
# G_SS         = $(G_SS_ROOT)/closure-stylesheets.jar
#G_SS         = $(G_SS_ROOT)/build/closure-stylesheets.jar

deps: download-deps #build-deps
	mkdir -p $(BUILD)

download-deps: #venv-fetch
	mkdir -p $(G_ROOT) $(G_CC_ROOT) $(G_CLIB_ROOT) #$(G_SS_ROOT) $(G_TPL_ROOT)
	wget -qO- $(G_CC_URL) | tar xz -C $(G_CC_ROOT)
	if [ ! -e $(G_CC) ]; then \
		for i in $(G_CC_ROOT)/closure-compiler-*.jar; do \
			rm -rf $(G_CC); \
			ln -s $$(basename $$i) $(G_CC); \
			break; \
		done; \
	fi
	wget -qO- $(G_CLIB_URL) | tar xz -C $(G_CLIB_ROOT) --strip 1
	# wget -O $(G_SS) $(G_SS_URL)
	# wget -qO- -O tmp.zip $(G_TPL_URL) && unzip -o tmp.zip -d $(G_TPL_ROOT) && rm tmp.zip
	#wget -qO- $(G_SS_URL) | tar xvz -C $(G_SS_ROOT)
	#svn co $(G_TPL_URL) $(G_TPL_ROOT)
	#git clone $(G_SS_URL) $(G_SS_ROOT)

#venv-fetch:
#	svn co $(G_LINT_URL) $(G_LINT_ROOT)

#build-deps: venv-build
#	cd $(G_CC_ROOT) && ant jar
#	cd $(G_TPL_ROOT) && ant SoyToJsSrcCompiler
#	cd $(G_SS_ROOT) && ant jar

#venv-build:
#	virtualenv $(VENV)
#	bash -c '$(ACTIVENV) && cd $(G_LINT_ROOT) && python setup.py install'

#venv: venv-fetch venv-build

clean-deps:
	rm -rf $(DEPS_ROOT)